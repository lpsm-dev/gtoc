---
version: "3"

vars:
  BINARY_NAME: gtoc
  MAIN_PACKAGE: .
  VERSION:
    sh: git describe --tags --always --dirty || echo "dev"
  BUILD_FLAGS: -ldflags "-s -w -X github.com/lpsm-dev/gtoc/cmd.Version={{.VERSION}}"
  BUILD_DIR: ./bin
  COVERAGE_DIR: ./coverage
  GOPATH:
    sh: go env GOPATH

tasks:
  default:
    desc: Display available tasks
    cmds:
      - task -l
    silent: true

  build:
    desc: Build the binary
    cmds:
      - echo "Building {{.BINARY_NAME}} version {{.VERSION}}..."
      - mkdir -p {{.BUILD_DIR}}
      - go build {{.BUILD_FLAGS}} -o {{.BUILD_DIR}}/{{.BINARY_NAME}} {{.MAIN_PACKAGE}}

  install:
    desc: Install the binary to GOPATH/bin
    deps: [build]
    cmds:
      - echo "Installing {{.BINARY_NAME}} to {{.GOPATH}}/bin..."
      - cp {{.BUILD_DIR}}/{{.BINARY_NAME}} {{.GOPATH}}/bin/

  run:
    desc: Run the application
    deps: [build]
    cmds:
      - "{{.BUILD_DIR}}/{{.BINARY_NAME}} {{.CLI_ARGS}}"

  clean:
    desc: Clean build artifacts
    cmds:
      - echo "Cleaning build artifacts..."
      - rm -rf {{.BUILD_DIR}}
      - rm -rf {{.COVERAGE_DIR}}

  test:
    desc: Run tests
    cmds:
      - echo "Running tests..."
      - go test -v ./...

  test:coverage:
    desc: Run tests with coverage
    cmds:
      - echo "Running tests with coverage..."
      - mkdir -p {{.COVERAGE_DIR}}
      - go test -v -coverprofile={{.COVERAGE_DIR}}/coverage.out ./...
      - go tool cover -html={{.COVERAGE_DIR}}/coverage.out -o {{.COVERAGE_DIR}}/coverage.html
      - echo "Coverage report generated at {{.COVERAGE_DIR}}/coverage.html"

  lint:
    desc: Run linters
    cmds:
      - echo "Running golangci-lint..."
      - golangci-lint run ./...

  fmt:
    desc: Format code
    cmds:
      - echo "Formatting code..."
      - go fmt ./...

  vet:
    desc: Run go vet
    cmds:
      - echo "Running go vet..."
      - go vet ./...

  mod:tidy:
    desc: Tidy go modules
    cmds:
      - echo "Tidying go modules..."
      - go mod tidy

  release:snapshot:
    desc: Run goreleaser in snapshot mode
    cmds:
      - echo "Running goreleaser in snapshot mode..."
      - goreleaser release --snapshot --clean

  release:local:
    desc: Run goreleaser in local mode
    cmds:
      - echo "Running goreleaser in local mode..."
      - goreleaser release --skip=publish --clean

  release:
    desc: Create a new release
    cmds:
      - echo "Creating a new release..."
      - |
        if [ -z "$(git status --porcelain)" ]; then
          echo "Working directory is clean"
        else
          echo "Working directory is not clean. Please commit or stash changes before releasing."
          exit 1
        fi
      - |
        if [ -z "{{.TAG}}" ]; then
          echo "Please provide a tag name: task release TAG=v1.0.0"
          exit 1
        fi
      - git tag -a {{.TAG}} -m "Release {{.TAG}}"
      - git push origin {{.TAG}}
      - echo "Tag {{.TAG}} pushed. GitHub Actions will handle the release process."

  docker:build:
    desc: Build Docker image
    cmds:
      - echo "Building Docker image..."
      - docker build -t lpsm/{{.BINARY_NAME}}:latest .

  docker:run:
    desc: Run Docker image
    deps: [docker:build]
    cmds:
      - echo "Running Docker image..."
      - docker run --rm lpsm/{{.BINARY_NAME}}:latest {{.CLI_ARGS}}

  setup:
    desc: Setup development environment
    cmds:
      - echo "Setting up development environment..."
      - |
        if ! command -v golangci-lint &> /dev/null; then
          echo "Installing golangci-lint..."
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin
        fi
      - |
        if ! command -v goreleaser &> /dev/null; then
          echo "Installing goreleaser..."
          go install github.com/goreleaser/goreleaser@latest
        fi
      - task mod:tidy

  all:
    desc: Run all checks and build
    cmds:
      - task fmt
      - task vet
      - task lint
      - task test
      - task build
